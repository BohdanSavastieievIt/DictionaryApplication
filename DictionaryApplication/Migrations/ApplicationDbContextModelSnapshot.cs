// <auto-generated />
using System;
using DictionaryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DictionaryApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Dict")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DictionaryApp.Models.DictionaryLexemePair", b =>
                {
                    b.Property<int>("UserDictionaryId")
                        .HasColumnType("int");

                    b.Property<int>("LexemeId")
                        .HasColumnType("int");

                    b.HasKey("UserDictionaryId", "LexemeId");

                    b.HasIndex("LexemeId");

                    b.ToTable("DictionaryLexemePairs", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IsNativeCount")
                        .HasColumnType("int");

                    b.Property<int>("IsStudiedCount")
                        .HasColumnType("int");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Languages", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.Lexeme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectTestAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<int>("TotalTestAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.ToTable("Lexemes", "Dict");

                    b.ToSqlQuery("CREATE TRIGGER TRG_DeleteLexemePairs \r\n                  ON Lexemes\r\n                  INSTEAD OF DELETE\r\n                  AS\r\n                  BEGIN\r\n                      DELETE lp\r\n                      FROM LexemePairs lp\r\n                      JOIN deleted d ON lp.Lexeme1Id = d.Id OR lp.Lexeme2Id = d.Id\r\n                  END;");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LexemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LexemeId");

                    b.ToTable("LexemeDefinitions", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemePair", b =>
                {
                    b.Property<int>("Lexeme1Id")
                        .HasColumnType("int");

                    b.Property<int>("Lexeme2Id")
                        .HasColumnType("int");

                    b.Property<string>("LexemeRelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lexeme1Id", "Lexeme2Id");

                    b.HasIndex("Lexeme2Id");

                    b.HasIndex("Lexeme1Id", "Lexeme2Id")
                        .IsUnique();

                    b.ToTable("LexemePairs", "Dict", t =>
                        {
                            t.HasCheckConstraint("CHK_Dictionary_Languages_Not_Equal", "Lexeme1Id <> Lexeme2Id");
                        });
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemeUsageExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LexemeDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("UsageExample")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("LexemeDefinitionId");

                    b.ToTable("LexemeUsageExamples", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.UserDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudiedLangId")
                        .HasColumnType("int");

                    b.Property<int>("TranslationLangId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TranslationLangId");

                    b.HasIndex("UserId");

                    b.HasIndex("StudiedLangId", "TranslationLangId")
                        .IsUnique();

                    b.ToTable("UserDictionaries", "Dict", t =>
                        {
                            t.HasCheckConstraint("CHK_Dictionary_Languages_Not_Equal", "StudiedLangId <> TranslationLangId")
                                .HasName("CHK_Dictionary_Languages_Not_Equal1");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Dict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Dict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Dict");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Dict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Dict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Dict");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("User", "Dict");
                });

            modelBuilder.Entity("DictionaryApp.Models.DictionaryLexemePair", b =>
                {
                    b.HasOne("DictionaryApp.Models.Lexeme", "Lexeme")
                        .WithMany("DictionaryLexemePairs")
                        .HasForeignKey("LexemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.UserDictionary", "UserDictionary")
                        .WithMany("DictionaryLexemePairs")
                        .HasForeignKey("UserDictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lexeme");

                    b.Navigation("UserDictionary");
                });

            modelBuilder.Entity("DictionaryApp.Models.Lexeme", b =>
                {
                    b.HasOne("DictionaryApp.Models.Language", "LexemeLanguage")
                        .WithMany("Lexemes")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LexemeLanguage");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemeDefinition", b =>
                {
                    b.HasOne("DictionaryApp.Models.Lexeme", "Lexeme")
                        .WithMany("LexemeDefinitions")
                        .HasForeignKey("LexemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lexeme");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemePair", b =>
                {
                    b.HasOne("DictionaryApp.Models.Lexeme", "Lexeme1")
                        .WithMany("Lexeme1Pairs")
                        .HasForeignKey("Lexeme1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Lexeme", "Lexeme2")
                        .WithMany("Lexeme2Pairs")
                        .HasForeignKey("Lexeme2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lexeme1");

                    b.Navigation("Lexeme2");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemeUsageExample", b =>
                {
                    b.HasOne("DictionaryApp.Models.LexemeDefinition", "LexemeDefinition")
                        .WithMany("LexemeUsageExamples")
                        .HasForeignKey("LexemeDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LexemeDefinition");
                });

            modelBuilder.Entity("DictionaryApp.Models.UserDictionary", b =>
                {
                    b.HasOne("DictionaryApp.Models.Language", "StudiedLanguage")
                        .WithMany("StudiedUserDictionaries")
                        .HasForeignKey("StudiedLangId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Language", "TranslationLanguage")
                        .WithMany("TranslationUserDictionaries")
                        .HasForeignKey("TranslationLangId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.ApplicationUser", "User")
                        .WithMany("UserDictionaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudiedLanguage");

                    b.Navigation("TranslationLanguage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DictionaryApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("DictionaryApp.Models.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DictionaryApp.Models.Language", b =>
                {
                    b.Navigation("Lexemes");

                    b.Navigation("StudiedUserDictionaries");

                    b.Navigation("TranslationUserDictionaries");
                });

            modelBuilder.Entity("DictionaryApp.Models.Lexeme", b =>
                {
                    b.Navigation("DictionaryLexemePairs");

                    b.Navigation("Lexeme1Pairs");

                    b.Navigation("Lexeme2Pairs");

                    b.Navigation("LexemeDefinitions");
                });

            modelBuilder.Entity("DictionaryApp.Models.LexemeDefinition", b =>
                {
                    b.Navigation("LexemeUsageExamples");
                });

            modelBuilder.Entity("DictionaryApp.Models.UserDictionary", b =>
                {
                    b.Navigation("DictionaryLexemePairs");
                });

            modelBuilder.Entity("DictionaryApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserDictionaries");
                });
#pragma warning restore 612, 618
        }
    }
}
